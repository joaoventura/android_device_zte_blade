From 80a50ff1d84afad039d7b9b44ed9cbedf4512bc4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Ventura?= <joaojonesventura@gmail.com>
Date: Wed, 30 Jan 2013 17:40:13 +0000
Subject: [PATCH] Prefer 16bpp formats for opaque bitmaps

Configure BitmapFactory to prefer RGB565, which will make it
use that format for all opaque assets loaded by it with standard
settings. Toggle dithering flag in strategic places and reenable
16bpp drawing cache, to speed up software UI rendering.

(Original author: Grigori Goronzy <greg@blackbox>)

Change-Id: I292f77a4481e86964255d7b59c9407f5e99a8e08
---
 core/java/android/view/ViewRootImpl.java          |    2 +-
 graphics/java/android/graphics/Bitmap.java        |    1 +
 graphics/java/android/graphics/BitmapFactory.java |    6 +++---
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index 6c982eb..9a02ca6 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -935,7 +935,7 @@ public final class ViewRootImpl extends Handler implements ViewParent,
             // We used to use the following condition to choose 32 bits drawing caches:
             // PixelFormat.hasAlpha(lp.format) || lp.format == PixelFormat.RGBX_8888
             // However, windows are now always 32 bits by default, so choose 32 bits
-            attachInfo.mUse32BitDrawingCache = true;
+            attachInfo.mUse32BitDrawingCache = PixelFormat.formatHasAlpha(lp.format) || lp.format == PixelFormat.RGBX_8888;
             attachInfo.mHasWindowFocus = false;
             attachInfo.mWindowVisibility = viewVisibility;
             attachInfo.mRecomputeGlobalAttributes = false;
diff --git a/graphics/java/android/graphics/Bitmap.java b/graphics/java/android/graphics/Bitmap.java
index 380b3d8..4015544 100644
--- a/graphics/java/android/graphics/Bitmap.java
+++ b/graphics/java/android/graphics/Bitmap.java
@@ -555,6 +555,7 @@ public final class Bitmap implements Parcelable {
             canvas.concat(m);
 
             paint = new Paint();
+            paint.setDither(true);
             paint.setFilterBitmap(filter);
             if (transformed) {
                 paint.setAntiAlias(true);
diff --git a/graphics/java/android/graphics/BitmapFactory.java b/graphics/java/android/graphics/BitmapFactory.java
index 8d17561..6de8986 100644
--- a/graphics/java/android/graphics/BitmapFactory.java
+++ b/graphics/java/android/graphics/BitmapFactory.java
@@ -38,7 +38,7 @@ public class BitmapFactory {
          * the same result from the decoder as if null were passed.
          */
         public Options() {
-            inDither = false;
+            inDither = true;
             inScaled = true;
         }
 
@@ -98,10 +98,10 @@ public class BitmapFactory {
          * system's screen depth, and characteristics of the original image such
          * as if it has per-pixel alpha (requiring a config that also does).
          * 
-         * Image are loaded with the {@link Bitmap.Config#ARGB_8888} config by
+         * Image are loaded with the {@link Bitmap.Config#RGB_565} config by
          * default.
          */
-        public Bitmap.Config inPreferredConfig = Bitmap.Config.ARGB_8888;
+        public Bitmap.Config inPreferredConfig = Bitmap.Config.RGB_565;
 
         /**
          * If dither is true, the decoder will attempt to dither the decoded
-- 
1.7.10.4

