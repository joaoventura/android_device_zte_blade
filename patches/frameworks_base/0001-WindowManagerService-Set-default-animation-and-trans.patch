From 8cfe6a985f1b3952559a56036f1dbb4b1f4d0228 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Ventura?= <joaojonesventura@gmail.com>
Date: Sat, 10 Nov 2012 12:29:17 +0000
Subject: [PATCH] WindowManagerService: Set default animation and transitions
 to fast

Change-Id: I9e40b75adb658ee2a7d12a260a732fc5172efaa3
---
 .../com/android/server/WindowManagerService.java   |  258 ++++++++++----------
 1 file changed, 129 insertions(+), 129 deletions(-)

diff --git a/services/java/com/android/server/WindowManagerService.java b/services/java/com/android/server/WindowManagerService.java
index e136b72..a57b6a8 100644
--- a/services/java/com/android/server/WindowManagerService.java
+++ b/services/java/com/android/server/WindowManagerService.java
@@ -212,11 +212,11 @@ public class WindowManagerService extends IWindowManager.Stub
      * @hide
      */
     static final boolean CUSTOM_SCREEN_ROTATION = SystemProperties.getBoolean("persist.sys.rotationanimation",true);
-    
+
     // Maximum number of milliseconds to wait for input event injection.
     // FIXME is this value reasonable?
     private static final int INJECTION_TIMEOUT_MILLIS = 30 * 1000;
-    
+
     // Default input dispatching timeout in nanoseconds.
     private static final long DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS = 5000 * 1000000L;
 
@@ -412,12 +412,12 @@ public class WindowManagerService extends IWindowManager.Stub
     int mAppsFreezingScreen = 0;
 
     int mLayoutSeq = 0;
-    
+
     // State while inside of layoutAndPlaceSurfacesLocked().
     boolean mFocusMayChange;
-    
+
     Configuration mCurConfiguration = new Configuration();
-    
+
     // This is held as long as we have the screen frozen, to give us time to
     // perform a rotation animation when turning off shows the lock screen which
     // changes the orientation.
@@ -489,8 +489,8 @@ public class WindowManagerService extends IWindowManager.Stub
 
     PowerManagerService mPowerManager;
 
-    float mWindowAnimationScale = 1.0f;
-    float mTransitionAnimationScale = 1.0f;
+    float mWindowAnimationScale = 0.5f;
+    float mTransitionAnimationScale = 0.5f;
 
     final InputManager mInputManager;
 
@@ -617,7 +617,7 @@ public class WindowManagerService extends IWindowManager.Stub
         public void run() {
             Looper.prepare();
             WindowManagerPolicyThread.set(this, Looper.myLooper());
-            
+
             //Looper.myLooper().setMessageLogging(new LogPrinter(
             //        Log.VERBOSE, "WindowManagerPolicy", Log.LOG_ID_SYSTEM));
             android.os.Process.setThreadPriority(
@@ -1820,7 +1820,7 @@ public class WindowManagerService extends IWindowManager.Stub
             }
         }
     }
-    
+
     public int addWindow(Session session, IWindow client,
             WindowManager.LayoutParams attrs, int viewVisibility,
             Rect outContentInsets, InputChannel outInputChannel) {
@@ -1935,13 +1935,13 @@ public class WindowManagerService extends IWindowManager.Stub
             if (res != WindowManagerImpl.ADD_OKAY) {
                 return res;
             }
-            
+
             if (outInputChannel != null) {
                 String name = win.makeInputChannelName();
                 InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);
                 win.mInputChannel = inputChannels[0];
                 inputChannels[1].transferToBinderOutParameter(outInputChannel);
-                
+
                 mInputManager.registerInputChannel(win.mInputChannel);
             }
 
@@ -2016,11 +2016,11 @@ public class WindowManagerService extends IWindowManager.Stub
             if (focusChanged) {
                 finishUpdateFocusedWindowAfterAssignLayersLocked();
             }
-            
+
             if (localLOGV) Slog.v(
                 TAG, "New client " + client.asBinder()
                 + ": window=" + win);
-            
+
             if (win.isVisibleOrAdding() && updateOrientationFromAppTokensLocked(false)) {
                 reportNewConfig = true;
             }
@@ -2058,7 +2058,7 @@ public class WindowManagerService extends IWindowManager.Stub
             + ", surface=" + win.mSurface);
 
         final long origId = Binder.clearCallingIdentity();
-        
+
         win.disposeInputChannel();
 
         if (DEBUG_APP_TRANSITIONS) Slog.v(
@@ -2198,7 +2198,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 win.mAppToken.updateReportedVisibilityLocked();
             }
         }
-        
+
         mInputMonitor.updateInputWindowsLw();
     }
 
@@ -2211,7 +2211,7 @@ public class WindowManagerService extends IWindowManager.Stub
             Slog.i(TAG, str);
         }
     }
-    
+
     private void setTransparentRegionWindow(Session session, IWindow client, Region region) {
         long origId = Binder.clearCallingIdentity();
         try {
@@ -2446,7 +2446,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                 } catch (Exception e) {
                     mInputMonitor.updateInputWindowsLw();
-                    
+
                     Slog.w(TAG, "Exception thrown when creating surface for client "
                              + client + " (" + win.mAttrs.getTitle() + ")",
                              e);
@@ -2587,7 +2587,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 TAG, "Relayout of " + win + ": focusMayChange=" + focusMayChange);
 
             inTouchMode = mInTouchMode;
-            
+
             mInputMonitor.updateInputWindowsLw();
         }
 
@@ -2986,7 +2986,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 "addAppToken()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
         }
-        
+
         // Get the dispatching timeout here while we are not holding any locks so that it
         // can be cached by the AppWindowToken.  The timeout value is used later by the
         // input dispatcher in code that does hold locks.  If we did not cache the value
@@ -3130,7 +3130,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
         Configuration config = null;
         long ident = Binder.clearCallingIdentity();
-        
+
         synchronized(mWindowMap) {
             if (updateOrientationFromAppTokensLocked(false)) {
                 if (freezeThisOneIfNeeded != null) {
@@ -3142,7 +3142,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                 }
                 config = computeNewConfigurationLocked();
-                
+
             } else if (currentConfig != null) {
                 // No obvious action we need to take, but if our current
                 // state mismatches the activity manager's, update it,
@@ -3160,7 +3160,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
             }
         }
-        
+
         Binder.restoreCallingIdentity(ident);
         return config;
     }
@@ -3172,7 +3172,7 @@ public class WindowManagerService extends IWindowManager.Stub
      * setNewConfiguration() TO TELL THE WINDOW MANAGER IT CAN UNFREEZE THE
      * SCREEN.  This will typically be done for you if you call
      * sendNewConfiguration().
-     * 
+     *
      * The orientation is computed from non-application windows first. If none of
      * the non-application windows specify orientation, the orientation is computed from
      * application tokens.
@@ -3232,7 +3232,7 @@ public class WindowManagerService extends IWindowManager.Stub
             performLayoutAndPlaceSurfacesLocked();
         }
     }
-    
+
     public void setAppOrientation(IApplicationToken token, int requestedOrientation) {
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "setAppOrientation()")) {
@@ -4203,7 +4203,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     private boolean shouldAllowDisableKeyguard()
     {
-        // We fail safe and prevent disabling keyguard in the unlikely event this gets 
+        // We fail safe and prevent disabling keyguard in the unlikely event this gets
         // called before DevicePolicyManagerService has started.
         if (mAllowDisableKeyguard == ALLOW_DISABLE_UNKNOWN) {
             DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(
@@ -4427,7 +4427,7 @@ public class WindowManagerService extends IWindowManager.Stub
         }
         return mInputManager.getKeyCodeState(-1, InputDevice.SOURCE_DPAD, sw);
     }
-    
+
     public boolean hasKeys(int[] keycodes, boolean[] keyExists) {
         return mInputManager.hasKeys(-1, InputDevice.SOURCE_ANY, keycodes, keyExists);
     }
@@ -4557,7 +4557,7 @@ public class WindowManagerService extends IWindowManager.Stub
      * Apply a new rotation to the screen, respecting the requests of
      * applications.  Use WindowManagerPolicy.USE_LAST_ROTATION to simply
      * re-evaluate the desired rotation.
-     * 
+     *
      * Returns null if the rotation has been changed.  In this case YOU
      * MUST CALL setNewConfiguration() TO UNFREEZE THE SCREEN.
      */
@@ -5023,7 +5023,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
             try {
                 mPointerSurface = new Surface(mFxSession,
-                                              0, -1, 
+                                              0, -1,
                                               pointer.getWidth(),
                                               pointer.getHeight(),
                                               PixelFormat.TRANSPARENT,
@@ -5087,7 +5087,7 @@ public class WindowManagerService extends IWindowManager.Stub
         if (mDisplay == null) {
             return false;
         }
-        
+
         mInputManager.getInputConfiguration(config);
 
         // Use the effective "visual" dimensions based on current rotation
@@ -5143,7 +5143,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 } else {
                     mScreenLayout = Configuration.SCREENLAYOUT_SIZE_NORMAL;
                 }
-                
+
                 // If this screen is wider than normal HVGA, or taller
                 // than FWVGA, then for old apps we want to run in size
                 // compatibility mode.
@@ -5167,34 +5167,34 @@ public class WindowManagerService extends IWindowManager.Stub
         mPolicy.adjustConfigurationLw(config);
         return true;
     }
-    
+
     // -------------------------------------------------------------
     // Input Events and Focus Management
     // -------------------------------------------------------------
-    
+
     InputMonitor mInputMonitor = new InputMonitor();
-    
+
     /* Tracks the progress of input dispatch and ensures that input dispatch state
      * is kept in sync with changes in window focus, visibility, registration, and
      * other relevant Window Manager state transitions. */
     final class InputMonitor {
         // Current window with input focus for keys and other non-touch events.  May be null.
         private WindowState mInputFocus;
-        
+
         // When true, prevents input dispatch from proceeding until set to false again.
         private boolean mInputDispatchFrozen;
-        
+
         // When true, input dispatch proceeds normally.  Otherwise all events are dropped.
         private boolean mInputDispatchEnabled = true;
 
         // Temporary list of windows information to provide to the input dispatcher.
         private InputWindowList mTempInputWindows = new InputWindowList();
-        
+
         // Temporary input application object to provide to the input dispatcher.
         private InputApplication mTempInputApplication = new InputApplication();
-        
+
         /* Notifies the window manager about a broken input channel.
-         * 
+         *
          * Called by the InputManager.
          */
         public void notifyInputChannelBroken(InputChannel inputChannel) {
@@ -5203,15 +5203,15 @@ public class WindowManagerService extends IWindowManager.Stub
                 if (windowState == null) {
                     return; // irrelevant
                 }
-                
+
                 Slog.i(TAG, "WINDOW DIED " + windowState);
                 removeWindowLocked(windowState.mSession, windowState);
             }
         }
-        
+
         /* Notifies the window manager about an application that is not responding.
          * Returns a new timeout to continue waiting in nanoseconds, or 0 to abort dispatch.
-         * 
+         *
          * Called by the InputManager.
          */
         public long notifyANR(Object token, InputChannel inputChannel) {
@@ -5226,7 +5226,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                 }
             }
-            
+
             if (appWindowToken == null && token != null) {
                 appWindowToken = (AppWindowToken) token;
                 Slog.i(TAG, "Input event dispatching timed out sending to application "
@@ -5248,13 +5248,13 @@ public class WindowManagerService extends IWindowManager.Stub
             }
             return 0; // abort dispatching
         }
-        
+
         private WindowState getWindowStateForInputChannel(InputChannel inputChannel) {
             synchronized (mWindowMap) {
                 return getWindowStateForInputChannelLocked(inputChannel);
             }
         }
-        
+
         private WindowState getWindowStateForInputChannelLocked(InputChannel inputChannel) {
             int windowCount = mWindows.size();
             for (int i = 0; i < windowCount; i++) {
@@ -5263,10 +5263,10 @@ public class WindowManagerService extends IWindowManager.Stub
                     return windowState;
                 }
             }
-            
+
             return null;
         }
-        
+
         /* Updates the cached window information provided to the input dispatcher. */
         public void updateInputWindowsLw() {
             // Populate the input window list with information about all of the windows that
@@ -5282,15 +5282,15 @@ public class WindowManagerService extends IWindowManager.Stub
                     // Skip this window because it cannot possibly receive input.
                     continue;
                 }
-                
+
                 final int flags = child.mAttrs.flags;
                 final int type = child.mAttrs.type;
-                
+
                 final boolean hasFocus = (child == mInputFocus);
                 final boolean isVisible = child.isVisibleLw();
                 final boolean hasWallpaper = (child == mWallpaperTarget)
                         && (type != WindowManager.LayoutParams.TYPE_KEYGUARD);
-                
+
                 // Add a window to our list of input windows.
                 final InputWindow inputWindow = mTempInputWindows.add();
                 inputWindow.inputChannel = child.mInputChannel;
@@ -5306,19 +5306,19 @@ public class WindowManagerService extends IWindowManager.Stub
                 inputWindow.layer = child.mLayer;
                 inputWindow.ownerPid = child.mSession.mPid;
                 inputWindow.ownerUid = child.mSession.mUid;
-                
+
                 final Rect frame = child.mFrame;
                 inputWindow.frameLeft = frame.left;
                 inputWindow.frameTop = frame.top;
                 inputWindow.frameRight = frame.right;
                 inputWindow.frameBottom = frame.bottom;
-                
+
                 final Rect visibleFrame = child.mVisibleFrame;
                 inputWindow.visibleFrameLeft = visibleFrame.left;
                 inputWindow.visibleFrameTop = visibleFrame.top;
                 inputWindow.visibleFrameRight = visibleFrame.right;
                 inputWindow.visibleFrameBottom = visibleFrame.bottom;
-                
+
                 switch (child.mTouchableInsets) {
                     default:
                     case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_FRAME:
@@ -5327,7 +5327,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         inputWindow.touchableAreaRight = frame.right;
                         inputWindow.touchableAreaBottom = frame.bottom;
                         break;
-                        
+
                     case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT: {
                         Rect inset = child.mGivenContentInsets;
                         inputWindow.touchableAreaLeft = frame.left + inset.left;
@@ -5336,7 +5336,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         inputWindow.touchableAreaBottom = frame.bottom - inset.bottom;
                         break;
                     }
-                        
+
                     case ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE: {
                         Rect inset = child.mGivenVisibleInsets;
                         inputWindow.touchableAreaLeft = frame.left + inset.left;
@@ -5350,17 +5350,17 @@ public class WindowManagerService extends IWindowManager.Stub
 
             // Send windows to native code.
             mInputManager.setInputWindows(mTempInputWindows.toNullTerminatedArray());
-            
+
             // Clear the list in preparation for the next round.
             // Also avoids keeping InputChannel objects referenced unnecessarily.
             mTempInputWindows.clear();
         }
-        
+
         /* Notifies that the lid switch changed state. */
         public void notifyLidSwitchChanged(long whenNanos, boolean lidOpen) {
             mPolicy.notifyLidSwitchChanged(whenNanos, lidOpen);
         }
-        
+
         /* Provides an opportunity for the window manager policy to intercept early key
          * processing as soon as the key has been read from the device. */
         public int interceptKeyBeforeQueueing(long whenNanos, int action, int flags,
@@ -5368,7 +5368,7 @@ public class WindowManagerService extends IWindowManager.Stub
             return mPolicy.interceptKeyBeforeQueueing(whenNanos, action, flags,
                     keyCode, scanCode, policyFlags, isScreenOn);
         }
-        
+
         /* Provides an opportunity for the window manager policy to process a key before
          * ordinary dispatch. */
         public boolean interceptKeyBeforeDispatching(InputChannel focus,
@@ -5378,7 +5378,7 @@ public class WindowManagerService extends IWindowManager.Stub
             return mPolicy.interceptKeyBeforeDispatching(windowState, action, flags,
                     keyCode, scanCode, metaState, repeatCount, policyFlags);
         }
-        
+
         /* Called when the current input focus changes.
          * Layer assignment is assumed to be complete by the time this is called.
          */
@@ -5394,12 +5394,12 @@ public class WindowManagerService extends IWindowManager.Stub
                     // forgets to resume.
                     newWindow.mToken.paused = false;
                 }
-            
+
                 mInputFocus = newWindow;
                 updateInputWindowsLw();
             }
         }
-        
+
         public void setFocusedAppLw(AppWindowToken newApp) {
             // Focused app has changed.
             if (newApp == null) {
@@ -5409,66 +5409,66 @@ public class WindowManagerService extends IWindowManager.Stub
                 mTempInputApplication.dispatchingTimeoutNanos =
                         newApp.inputDispatchingTimeoutNanos;
                 mTempInputApplication.token = newApp;
-                
+
                 mInputManager.setFocusedApplication(mTempInputApplication);
             }
         }
-        
+
         public void pauseDispatchingLw(WindowToken window) {
             if (! window.paused) {
                 if (DEBUG_INPUT) {
                     Slog.v(TAG, "Pausing WindowToken " + window);
                 }
-                
+
                 window.paused = true;
                 updateInputWindowsLw();
             }
         }
-        
+
         public void resumeDispatchingLw(WindowToken window) {
             if (window.paused) {
                 if (DEBUG_INPUT) {
                     Slog.v(TAG, "Resuming WindowToken " + window);
                 }
-                
+
                 window.paused = false;
                 updateInputWindowsLw();
             }
         }
-        
+
         public void freezeInputDispatchingLw() {
             if (! mInputDispatchFrozen) {
                 if (DEBUG_INPUT) {
                     Slog.v(TAG, "Freezing input dispatching");
                 }
-                
+
                 mInputDispatchFrozen = true;
                 updateInputDispatchModeLw();
             }
         }
-        
+
         public void thawInputDispatchingLw() {
             if (mInputDispatchFrozen) {
                 if (DEBUG_INPUT) {
                     Slog.v(TAG, "Thawing input dispatching");
                 }
-                
+
                 mInputDispatchFrozen = false;
                 updateInputDispatchModeLw();
             }
         }
-        
+
         public void setEventDispatchingLw(boolean enabled) {
             if (mInputDispatchEnabled != enabled) {
                 if (DEBUG_INPUT) {
                     Slog.v(TAG, "Setting event dispatching to " + enabled);
                 }
-                
+
                 mInputDispatchEnabled = enabled;
                 updateInputDispatchModeLw();
             }
         }
-        
+
         private void updateInputDispatchModeLw() {
             mInputManager.setInputDispatchMode(mInputDispatchEnabled, mInputDispatchFrozen);
         }
@@ -5534,7 +5534,7 @@ public class WindowManagerService extends IWindowManager.Stub
         int deviceId = ev.getDeviceId();
         int scancode = ev.getScanCode();
         int source = ev.getSource();
-        
+
         if (source == InputDevice.SOURCE_UNKNOWN) {
             source = InputDevice.SOURCE_KEYBOARD;
         }
@@ -5548,12 +5548,12 @@ public class WindowManagerService extends IWindowManager.Stub
         final int pid = Binder.getCallingPid();
         final int uid = Binder.getCallingUid();
         final long ident = Binder.clearCallingIdentity();
-        
+
         final int result = mInputManager.injectInputEvent(newEvent, pid, uid,
                 sync ? InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_FINISH
                         : InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_RESULT,
                 INJECTION_TIMEOUT_MILLIS);
-        
+
         Binder.restoreCallingIdentity(ident);
         return reportInjectionResult(result);
     }
@@ -5573,17 +5573,17 @@ public class WindowManagerService extends IWindowManager.Stub
         final int pid = Binder.getCallingPid();
         final int uid = Binder.getCallingUid();
         final long ident = Binder.clearCallingIdentity();
-        
+
         MotionEvent newEvent = MotionEvent.obtain(ev);
         if ((newEvent.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
             newEvent.setSource(InputDevice.SOURCE_TOUCHSCREEN);
         }
-        
+
         final int result = mInputManager.injectInputEvent(newEvent, pid, uid,
                 sync ? InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_FINISH
                         : InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_RESULT,
                 INJECTION_TIMEOUT_MILLIS);
-        
+
         Binder.restoreCallingIdentity(ident);
         return reportInjectionResult(result);
     }
@@ -5603,21 +5603,21 @@ public class WindowManagerService extends IWindowManager.Stub
         final int pid = Binder.getCallingPid();
         final int uid = Binder.getCallingUid();
         final long ident = Binder.clearCallingIdentity();
-        
+
         MotionEvent newEvent = MotionEvent.obtain(ev);
         if ((newEvent.getSource() & InputDevice.SOURCE_CLASS_TRACKBALL) == 0) {
             newEvent.setSource(InputDevice.SOURCE_TRACKBALL);
         }
-        
+
         final int result = mInputManager.injectInputEvent(newEvent, pid, uid,
                 sync ? InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_FINISH
                         : InputManager.INPUT_EVENT_INJECTION_SYNC_WAIT_FOR_RESULT,
                 INJECTION_TIMEOUT_MILLIS);
-        
+
         Binder.restoreCallingIdentity(ident);
         return reportInjectionResult(result);
     }
-    
+
     /**
      * Inject an input event into the UI without waiting for dispatch to commence.
      * This variant is useful for fire-and-forget input event injection.  It does not
@@ -5630,15 +5630,15 @@ public class WindowManagerService extends IWindowManager.Stub
         final int pid = Binder.getCallingPid();
         final int uid = Binder.getCallingUid();
         final long ident = Binder.clearCallingIdentity();
-        
+
         final int result = mInputManager.injectInputEvent(ev, pid, uid,
                 InputManager.INPUT_EVENT_INJECTION_SYNC_NONE,
                 INJECTION_TIMEOUT_MILLIS);
-        
+
         Binder.restoreCallingIdentity(ident);
         return reportInjectionResult(result);
     }
-    
+
     private boolean reportInjectionResult(int result) {
         switch (result) {
             case InputManager.INPUT_EVENT_INJECTION_PERMISSION_DENIED:
@@ -5771,7 +5771,7 @@ public class WindowManagerService extends IWindowManager.Stub
             return addWindow(this, window, attrs, viewVisibility, outContentInsets,
                     outInputChannel);
         }
-        
+
         public int addWithoutInputChannel(IWindow window, WindowManager.LayoutParams attrs,
                 int viewVisibility, Rect outContentInsets) {
             return addWindow(this, window, attrs, viewVisibility, outContentInsets, null);
@@ -5967,9 +5967,9 @@ public class WindowManagerService extends IWindowManager.Stub
         boolean mTurnOnScreen;
 
         int mLayoutSeq = -1;
-        
+
         Configuration mConfiguration = null;
-        
+
         // Actual frame shown on-screen (may be modified by animation)
         final Rect mShownFrame = new Rect();
         final Rect mLastShownFrame = new Rect();
@@ -5979,7 +5979,7 @@ public class WindowManagerService extends IWindowManager.Stub
          * we must tell them application to resize (and thus redraw itself).
          */
         boolean mSurfaceResized;
-        
+
         /**
          * Insets that determine the actually visible area
          */
@@ -6112,10 +6112,10 @@ public class WindowManagerService extends IWindowManager.Stub
         int mSurfaceX, mSurfaceY, mSurfaceW, mSurfaceH;
         int mSurfaceLayer;
         float mSurfaceAlpha;
-        
+
         // Input channel
         InputChannel mInputChannel;
-        
+
         // Used to improve performance of toString()
         String mStringNameCache;
         CharSequence mLastTitle;
@@ -6348,7 +6348,7 @@ public class WindowManagerService extends IWindowManager.Stub
         public IApplicationToken getAppToken() {
             return mAppToken != null ? mAppToken.appToken : null;
         }
-        
+
         public long getInputDispatchingTimeoutNanos() {
             return mAppToken != null
                     ? mAppToken.inputDispatchingTimeoutNanos
@@ -7120,7 +7120,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
         void removeLocked() {
             disposeInputChannel();
-            
+
             if (mAttachedWindow != null) {
                 mAttachedWindow.mChildWindows.remove(this);
             }
@@ -7133,11 +7133,11 @@ public class WindowManagerService extends IWindowManager.Stub
                 // we are doing this as part of processing a death note.)
             }
         }
-        
+
         void disposeInputChannel() {
             if (mInputChannel != null) {
                 mInputManager.unregisterInputChannel(mInputChannel);
-                
+
                 mInputChannel.dispose();
                 mInputChannel = null;
             }
@@ -7383,7 +7383,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         pw.print(" mWallpaperYStep="); pw.println(mWallpaperYStep);
             }
         }
-        
+
         String makeInputChannelName() {
             return Integer.toHexString(System.identityHashCode(this))
                 + " " + mAttrs.getTitle();
@@ -7495,7 +7495,7 @@ public class WindowManagerService extends IWindowManager.Stub
         int groupId = -1;
         boolean appFullscreen;
         int requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
-        
+
         // The input dispatching timeout for this application token in nanoseconds.
         long inputDispatchingTimeoutNanos;
 
@@ -8423,7 +8423,7 @@ public class WindowManagerService extends IWindowManager.Stub
             // applications.  Don't do any window layout until we have it.
             return;
         }
-        
+
         if (mDisplay == null) {
             // Not yet initialized, nothing to do.
             return;
@@ -8487,9 +8487,9 @@ public class WindowManagerService extends IWindowManager.Stub
         if (!mLayoutNeeded) {
             return 0;
         }
-        
+
         mLayoutNeeded = false;
-        
+
         final int dw = mDisplay.getWidth();
         final int dh = mDisplay.getHeight();
 
@@ -8498,13 +8498,13 @@ public class WindowManagerService extends IWindowManager.Stub
 
         if (DEBUG_LAYOUT) Slog.v(TAG, "performLayout: needed="
                 + mLayoutNeeded + " dw=" + dw + " dh=" + dh);
-        
+
         mPolicy.beginLayoutLw(dw, dh);
 
         int seq = mLayoutSeq+1;
         if (seq < 0) seq = 0;
         mLayoutSeq = seq;
-        
+
         // First perform layout of any root windows (not attached
         // to another window).
         int topAttached = -1;
@@ -8533,7 +8533,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         + (atoken != null && atoken.hiddenRequested)
                         + " mAttachedHidden=" + win.mAttachedHidden);
             }
-            
+
             // If this view is GONE, then skip it -- keep the current
             // frame, and let the caller know so they can ignore it
             // if they want.  (We do the normal layout for INVISIBLE
@@ -8581,7 +8581,7 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
             }
         }
-        
+
         // Window frames may have changed.  Tell the input dispatcher about it.
         mInputMonitor.updateInputWindowsLw();
 
@@ -8619,7 +8619,7 @@ public class WindowManagerService extends IWindowManager.Stub
             mFocusMayChange = false;
             updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES);
         }
-        
+
         // Initialize state of exiting tokens.
         for (i=mExitingTokens.size()-1; i>=0; i--) {
             mExitingTokens.get(i).hasVisible = false;
@@ -8658,7 +8658,7 @@ public class WindowManagerService extends IWindowManager.Stub
             boolean wallpaperForceHidingChanged = false;
             int repeats = 0;
             int changes = 0;
-            
+
             do {
                 repeats++;
                 if (repeats > 6) {
@@ -8666,7 +8666,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     mLayoutNeeded = false;
                     break;
                 }
-                
+
                 if ((changes&(WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER
                         | WindowManagerPolicy.FINISH_LAYOUT_REDO_CONFIG
                         | WindowManagerPolicy.FINISH_LAYOUT_REDO_LAYOUT)) != 0) {
@@ -8687,7 +8687,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         mLayoutNeeded = true;
                     }
                 }
-                
+
                 // FIRST LOOP: Perform a layout, if needed.
                 if (repeats < 4) {
                     changes = performLayoutLockedInner();
@@ -8698,7 +8698,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     Slog.w(TAG, "Layout repeat skipped after too many iterations");
                     changes = 0;
                 }
-                
+
                 final int transactionSequence = ++mTransactionSequence;
 
                 // Update animations of all applications, including those
@@ -8718,11 +8718,11 @@ public class WindowManagerService extends IWindowManager.Stub
                 }
 
                 // SECOND LOOP: Execute animations and update visibility of windows.
-                
+
                 if (DEBUG_APP_TRANSITIONS) Slog.v(TAG, "*** ANIM STEP: seq="
                         + transactionSequence + " tokensAnimating="
                         + tokensAnimating);
-                        
+
                 animating = tokensAnimating;
 
                 if (mScreenRotationAnimation != null) {
@@ -9075,7 +9075,7 @@ public class WindowManagerService extends IWindowManager.Stub
                         if (!mPolicy.allowAppAnimationsLw()) {
                             animLp = null;
                         }
-                        
+
                         NN = mOpeningApps.size();
                         for (i=0; i<NN; i++) {
                             AppWindowToken wtoken = mOpeningApps.get(i);
@@ -9231,7 +9231,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
                 if (DEBUG_APP_TRANSITIONS) Slog.v(TAG, "*** ANIM STEP: changes=0x"
                         + Integer.toHexString(changes));
-                
+
                 mInputMonitor.updateInputWindowsLw();
             } while (changes != 0);
 
@@ -9269,7 +9269,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     // difficult because we do need to resize surfaces in some
                     // cases while they are hidden such as when first showing a
                     // window.
-                    
+
                     w.computeShownFrameLocked();
                     if (localLOGV) Slog.v(
                             TAG, "Placing surface #" + i + " " + w.mSurface
@@ -9685,7 +9685,7 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         mInputMonitor.updateInputWindowsLw();
-        
+
         Surface.closeTransaction();
 
         if (SHOW_TRANSACTIONS) Slog.i(TAG, "<<< CLOSE TRANSACTION performLayoutAndPlaceSurfaces");
@@ -9818,9 +9818,9 @@ public class WindowManagerService extends IWindowManager.Stub
         } else if (animating) {
             requestAnimationLocked(currentTime+(1000/60)-SystemClock.uptimeMillis());
         }
-        
+
         mInputMonitor.updateInputWindowsLw();
-        
+
         if (DEBUG_FREEZE) Slog.v(TAG, "Layout: mDisplayFrozen=" + mDisplayFrozen
                 + " holdScreen=" + holdScreen);
         if (!mDisplayFrozen) {
@@ -9850,12 +9850,12 @@ public class WindowManagerService extends IWindowManager.Stub
                     LocalPowerManager.BUTTON_EVENT, true);
             mTurnOnScreen = false;
         }
-        
+
         // Check to see if we are now in a state where the screen should
         // be enabled, because the window obscured flags have changed.
         enableScreenIfNeededLocked();
     }
-    
+
     /**
      * Must be called with the main window manager lock held.
      */
@@ -10029,7 +10029,7 @@ public class WindowManagerService extends IWindowManager.Stub
                     assignLayersLocked();
                 }
             }
-            
+
             if (mode != UPDATE_FOCUS_WILL_ASSIGN_LAYERS) {
                 // If we defer assigning layers, then the caller is responsible for
                 // doing this part.
@@ -10039,7 +10039,7 @@ public class WindowManagerService extends IWindowManager.Stub
         }
         return false;
     }
-    
+
     private void finishUpdateFocusedWindowAfterAssignLayersLocked() {
         mInputMonitor.setInputFocusLw(mCurrentFocus);
     }
@@ -10141,11 +10141,11 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         if (DEBUG_FREEZE) Slog.v(TAG, "*** FREEZING DISPLAY", new RuntimeException());
-        
+
         mDisplayFrozen = true;
-        
+
         mInputMonitor.freezeInputDispatchingLw();
-        
+
         if (mNextAppTransition != WindowManagerPolicy.TRANSIT_UNSET) {
             mNextAppTransition = WindowManagerPolicy.TRANSIT_UNSET;
             mNextAppTransitionPackage = null;
@@ -10179,9 +10179,9 @@ public class WindowManagerService extends IWindowManager.Stub
         if (mWaitingForConfig || mAppsFreezingScreen > 0 || mWindowsFreezingScreen) {
             return;
         }
-        
+
         if (DEBUG_FREEZE) Slog.v(TAG, "*** UNFREEZING DISPLAY", new RuntimeException());
-        
+
         mDisplayFrozen = false;
         mH.removeMessages(H.APP_FREEZE_TIMEOUT);
         if (PROFILE_ORIENTATION) {
@@ -10421,7 +10421,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
         mInputManager.dump(pw);
         pw.println(" ");
-        
+
         synchronized(mWindowMap) {
             pw.println("Current Window Manager state:");
             for (int i=mWindows.size()-1; i>=0; i--) {
@@ -10656,7 +10656,7 @@ public class WindowManagerService extends IWindowManager.Stub
         float mDimTargetAlpha;
         float mDimDeltaPerMs;
         long mLastDimAnimTime;
-        
+
         int mLastDimWidth, mLastDimHeight;
 
         DimAnimator (SurfaceSession session) {
-- 
1.7.9.5

